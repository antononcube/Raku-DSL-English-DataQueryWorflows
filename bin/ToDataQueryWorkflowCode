#!/usr/bin/env perl6

use DSL::English::DataQueryWorkflows;

#| Translates natural language commands into data transformations programming code.
#| If --clipboard-command is an empty string then CLIPBOARDCOMMAND and CLIPBOARD_COMMAND are attempted.
#| If those environment variables are not defined then 'pbcopy' is used on macOS, 'clip.exe' on Windows,
#| and "xclip -selection clipboard" on Linux.
multi sub MAIN(Str $command,                               #= A string with one or many commands (separated by ';').
               Str :t(:$target) = 'R-tidyverse',           #= Target (programming language with optional library spec.)
               Str :l(:$language) = 'English',             #= The natural language to translate from.
               Str :f(:$format) = 'automatic',             #= The format of the output, one of 'automatic', 'code', 'hash', or 'raku'.
               Bool :c(:$copy-to-clipboard) = True,        #= Should the result be copied to the clipboard or not?
               Str :cmd(:$clipboard-command) is copy = ''  #= Clipboard command to use (if --copy-to-clipboard.) If --clipboard-command is an empty string then CLIPBOARD_COPY_COMMAND and CB_CP_CMD are attempted. If those environment variables are not defined then 'pbcopy' is used on macOS, 'clip.exe' on Windows, and "xclip -selection clipboard" on Linux.
               ) {

    my Str $formatSpec = $format.lc (elem) <auto automatic whatever> ?? 'code' !! $format.lc;

    my $res = ToDataQueryWorkflowCode($command, $target, :$language, format => $formatSpec);

    say $res;

    if $copy-to-clipboard {
        if !$clipboard-command && %*ENV<CLIPBOARD_COPY_COMMAND> {
            $clipboard-command = %*ENV<CLIPBOARD_COPY_COMMAND>
        } elsif !$clipboard-command && %*ENV<CB_CP_CMD> {
            $clipboard-command = %*ENV<CB_CP_CMD>
        } else {
            $clipboard-command =
                    do given $*DISTRO {
                        when $_.is-win { "clip.exe" }
                        when $_ ~~ 'macos' { "pbcopy" }
                        default {
                            # Assuming it is Linux and it has xclip
                            "xclip -selection clipboard"
                        }
                    }
        }

        shell "echo '$res' | $clipboard-command"
    }
}

multi sub MAIN(Str $target,                         #= Programming language.
               Str $command,                        #= A string with one or many commands (separated by ';').
               Str :l(:$language) = 'English',      #= The natural language to translate from.
               Str :f(:$format) = 'automatic',      #= The format of the output, one of 'automatic', 'code', 'hash', or 'raku'.
               Str :cmd(:$clipboard-command) = '',  #= Clipboard command to use (if --copy-to-clipboard.)
               Bool :c(:$copy-to-clipboard) = True  #= Should the result be copied to the clipboard or not?
               ) {
    MAIN($command, :$target, :$language, :$format, :$clipboard-command, :$copy-to-clipboard);
}
