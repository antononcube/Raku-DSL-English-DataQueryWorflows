#!/usr/bin/env perl6

use DSL::English::DataQueryWorkflows;

multi sub MAIN
#= Easier target specification.
(Str $target,                                #= Programming language.
 Str $command,                               #= A string with one or many commands (separated by ';').
 Str :l(:$language) = 'English',             #= The natural language to translate from.
 Str :f(:$format) = 'automatic',             #= The format of the output, one of 'automatic', 'code', 'hash', or 'raku'.
 Str :c(:$clipboard-command) = 'Whatever'    #= Clipboard command to use (if --copy-to-clipboard.)
 ) {
    MAIN($command, :$target, :$language, :$format, :$clipboard-command);
}

multi sub MAIN
#= Translates natural language commands into data transformations programming code.
(*@words,                                            #= Words of a data query.
 Str :t(:$target) = 'R-tidyverse',                   #= Target (programming language with optional library spec.)
 Str :l(:$language) = 'English',                     #= The natural language to translate from.
 Str :f(:$format) = 'automatic',                     #= The format of the output, one of 'automatic', 'code', 'hash', or 'raku'.
 Str :c(:$clipboard-command) is copy = 'Whatever'    #= Clipboard command to use.
 ) {
    MAIN(@words.join(' '), :$target, :$language, :$format, :$clipboard-command);
 }

multi sub MAIN
#= Translates natural language commands into data transformations programming code.
(Str $command,                                       #= A string with one or many commands (separated by ';').
 Str :t(:$target) = 'R-tidyverse',                   #= Target (programming language with optional library spec.)
 Str :l(:$language) = 'English',                     #= The natural language to translate from.
 Str :f(:$format) = 'automatic',                     #= The format of the output, one of 'automatic', 'code', 'hash', or 'raku'.
 Str :c(:$clipboard-command) is copy = 'Whatever'    #= Clipboard command to use.
 ) {

    my Str $formatSpec = $format.lc (elem) <auto automatic whatever> ?? 'code' !! $format.lc;

    my $res = ToDataQueryWorkflowCode($command, $target, :$language, format => $formatSpec);

    say $res;

    if $clipboard-command eqv 'Whatever' {
        if %*ENV<CLIPBOARD_COPY_COMMAND>:exists {
            $clipboard-command = %*ENV<CLIPBOARD_COPY_COMMAND>;
        } else {
            $clipboard-command =
                    do given $*DISTRO {
                        when $_.is-win { "clip.exe" }
                        when $_ ~~ 'macos' { "pbcopy" }
                        default {
                            # Assuming it is Linux and it has xclip
                            "xclip -selection clipboard"
                        }
                    }
        }
    }

    if $clipboard-command.chars > 0 {
        shell "echo '$res' | $clipboard-command";
    }
}

sub USAGE() {
    say $*USAGE;
    say "\n";
    say Q:c:to/EOH/;
    Details:
        If --clipboard-command is the empty string then no copying to the clipboard is done.
        If --clipboard-command is 'Whatever' then:
            1. It is attempted to use the environment variable CLIPBOARD_COPY_COMMAND.
                If CLIPBOARD_COPY_COMMAND is defined and it is the empty string then no copying to the clipboard is done.
            2. If the variable CLIPBOARD_COPY_COMMAND is not defined then:
                - 'pbcopy' is used on macOS
                - 'clip.exe' on Windows
                - 'xclip -selection clipboard' on Linux.
    EOH
}